"""
Simple Legal QA Chatbot with LLM - Streamlit Application
Simplified version using LLM but without Qdrant vector database
"""

import streamlit as st
import pandas as pd
from typing import List, Dict
import logging

# LangChain imports for LLM
from langchain_ollama import ChatOllama
from langchain.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('legal_qa_simple.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Page configuration
st.set_page_config(
    page_title="Legal QA Chatbot - Simple LLM",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        border-left: 4px solid;
    }
    .user-message {
        background-color: #e3f2fd;
        border-left-color: #2196f3;
    }
    .assistant-message {
        background-color: #f3e5f5;
        border-left-color: #9c27b0;
    }
    .status-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 8px;
    }
    .status-ready {
        background-color: #4caf50;
    }
    .status-not-ready {
        background-color: #f44336;
    }
</style>
""", unsafe_allow_html=True)

class SimpleLegalQAWithLLM:
    """Simple Legal QA system using LLM without vector database."""
    
    def __init__(self):
        self.initialized = False
        self.llm = None
        self.legal_knowledge = {
            "thu·∫ø thu nh·∫≠p c√° nh√¢n": """
            Thu·∫ø thu nh·∫≠p c√° nh√¢n (TNCN) l√† lo·∫°i thu·∫ø tr·ª±c thu ƒë√°nh v√†o thu nh·∫≠p c·ªßa c√° nh√¢n.
            
            ƒê·ªëi t∆∞·ª£ng ch·ªãu thu·∫ø:
            - C√° nh√¢n c∆∞ tr√∫: Thu nh·∫≠p ph√°t sinh trong v√† ngo√†i l√£nh th·ªï Vi·ªát Nam
            - C√° nh√¢n kh√¥ng c∆∞ tr√∫: Thu nh·∫≠p ph√°t sinh trong l√£nh th·ªï Vi·ªát Nam
            
            Thu nh·∫≠p ch·ªãu thu·∫ø bao g·ªìm: thu nh·∫≠p t·ª´ kinh doanh, ti·ªÅn l∆∞∆°ng, ƒë·∫ßu t∆∞ v·ªën, 
            chuy·ªÉn nh∆∞·ª£ng v·ªën, chuy·ªÉn nh∆∞·ª£ng b·∫•t ƒë·ªông s·∫£n, tr√∫ng th∆∞·ªüng, b·∫£n quy·ªÅn, 
            nh∆∞·ª£ng quy·ªÅn th∆∞∆°ng m·∫°i, th·ª´a k·∫ø, qu√† t·∫∑ng.
            
            M·ª©c thu·∫ø su·∫•t t·ª´ 5% ƒë·∫øn 35% t√πy theo m·ª©c thu nh·∫≠p.
            """,
            
            "thu·∫ø vat": """
            Thu·∫ø gi√° tr·ªã gia tƒÉng (VAT) l√† lo·∫°i thu·∫ø gi√°n thu ƒë√°nh v√†o gi√° tr·ªã tƒÉng th√™m c·ªßa h√†ng h√≥a, d·ªãch v·ª•.
            
            ƒê·ªëi t∆∞·ª£ng ch·ªãu thu·∫ø: H√†ng h√≥a, d·ªãch v·ª• s·ª≠ d·ª•ng cho s·∫£n xu·∫•t, kinh doanh v√† ti√™u d√πng ·ªü Vi·ªát Nam.
            
            M·ª©c thu·∫ø su·∫•t:
            - 0%: H√†ng h√≥a, d·ªãch v·ª• xu·∫•t kh·∫©u
            - 5%: H√†ng h√≥a, d·ªãch v·ª• thi·∫øt y·∫øu
            - 10%: H√†ng h√≥a, d·ªãch v·ª• th√¥ng th∆∞·ªùng
            - 8%: M·ªôt s·ªë h√†ng h√≥a, d·ªãch v·ª• ƒë·∫∑c bi·ªát
            
            C√°ch t√≠nh: Thu·∫ø VAT ph·∫£i n·ªôp = Thu·∫ø VAT ƒë·∫ßu ra - Thu·∫ø VAT ƒë·∫ßu v√†o ƒë∆∞·ª£c kh·∫•u tr·ª´
            """,
            
            "lu·∫≠t lao ƒë·ªông": """
            Lu·∫≠t Lao ƒë·ªông quy ƒë·ªãnh v·ªÅ quy·ªÅn v√† nghƒ©a v·ª• c·ªßa ng∆∞·ªùi lao ƒë·ªông v√† ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông.
            
            Quy·ªÅn c·ªßa ng∆∞·ªùi lao ƒë·ªông: L√†m vi·ªác, t·ª± do l·ª±a ch·ªçn vi·ªác l√†m, ƒë∆∞·ª£c tr·∫£ l∆∞∆°ng ƒë·∫ßy ƒë·ªß, 
            ngh·ªâ ng∆°i, ngh·ªâ ph√©p nƒÉm, an to√†n lao ƒë·ªông, tham gia b·∫£o hi·ªÉm x√£ h·ªôi.
            
            Nghƒ©a v·ª•: Th·ª±c hi·ªán c√¥ng vi·ªác theo h·ª£p ƒë·ªìng, tu√¢n th·ªß n·ªôi quy, b·∫£o v·ªá t√†i s·∫£n doanh nghi·ªáp.
            
            Th·ªùi gian l√†m vi·ªác: Kh√¥ng qu√° 8 gi·ªù/ng√†y, 48 gi·ªù/tu·∫ßn, ngh·ªâ gi·ªØa ca √≠t nh·∫•t 30 ph√∫t.
            """,
            
            "ƒëƒÉng k√Ω kinh doanh": """
            Th·ªß t·ª•c ƒëƒÉng k√Ω kinh doanh:
            
            1. Chu·∫©n b·ªã h·ªì s∆°: ƒê∆°n ƒë·ªÅ ngh·ªã, ƒëi·ªÅu l·ªá c√¥ng ty, danh s√°ch th√†nh vi√™n/c·ªï ƒë√¥ng, 
               b·∫£n sao CMND/CCCD c·ªßa ng∆∞·ªùi ƒë·∫°i di·ªán.
            
            2. N·ªôp h·ªì s∆°: Tr·ª±c ti·∫øp t·∫°i Ph√≤ng ƒêƒÉng k√Ω kinh doanh ho·∫∑c qua m·∫°ng.
            
            3. Th·ªùi gian x·ª≠ l√Ω: 3-5 ng√†y l√†m vi·ªác.
            
            4. L·ªá ph√≠: 200.000 VNƒê (DNTN) ho·∫∑c 300.000 VNƒê (TNHH, c·ªï ph·∫ßn).
            
            5. Sau khi c·∫•p ph√©p: Kh·∫Øc d·∫•u, ƒëƒÉng k√Ω thu·∫ø, m·ªü t√†i kho·∫£n ng√¢n h√†ng.
            """,
            
            "h·ª£p ƒë·ªìng lao ƒë·ªông": """
            H·ª£p ƒë·ªìng lao ƒë·ªông l√† th·ªèa thu·∫≠n gi·ªØa ng∆∞·ªùi lao ƒë·ªông v√† ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông v·ªÅ vi·ªác l√†m c√≥ tr·∫£ c√¥ng.
            
            C√°c lo·∫°i h·ª£p ƒë·ªìng:
            - H·ª£p ƒë·ªìng kh√¥ng x√°c ƒë·ªãnh th·ªùi h·∫°n
            - H·ª£p ƒë·ªìng x√°c ƒë·ªãnh th·ªùi h·∫°n (kh√¥ng qu√° 36 th√°ng)
            - H·ª£p ƒë·ªìng theo m√πa v·ª• ho·∫∑c theo m·ªôt c√¥ng vi·ªác nh·∫•t ƒë·ªãnh (kh√¥ng qu√° 12 th√°ng)
            
            N·ªôi dung b·∫Øt bu·ªôc: C√¥ng vi·ªác, ƒë·ªãa ƒëi·ªÉm l√†m vi·ªác, th·ªùi h·∫°n h·ª£p ƒë·ªìng, m·ª©c l∆∞∆°ng, 
            th·ªùi gian l√†m vi·ªác, ngh·ªâ ng∆°i, b·∫£o hi·ªÉm x√£ h·ªôi.
            """,
            
            "ngh·ªâ vi·ªác": """
            Quy ƒë·ªãnh v·ªÅ ngh·ªâ vi·ªác:
            
            Ng∆∞·ªùi lao ƒë·ªông c√≥ quy·ªÅn ƒë∆°n ph∆∞∆°ng ch·∫•m d·ª©t h·ª£p ƒë·ªìng lao ƒë·ªông khi:
            - Kh√¥ng ƒë∆∞·ª£c b·ªë tr√≠ ƒë√∫ng c√¥ng vi·ªác, ƒë·ªãa ƒëi·ªÉm l√†m vi·ªác
            - Kh√¥ng ƒë∆∞·ª£c tr·∫£ l∆∞∆°ng ƒë·∫ßy ƒë·ªß, ƒë√∫ng th·ªùi h·∫°n
            - B·ªã ng∆∞·ª£c ƒë√£i, qu·∫•y r·ªëi t√¨nh d·ª•c, c∆∞·ª°ng b·ª©c lao ƒë·ªông
            
            Th·ªùi b√°o tr∆∞·ªõc: 45 ng√†y (h·ª£p ƒë·ªìng kh√¥ng x√°c ƒë·ªãnh th·ªùi h·∫°n), 30 ng√†y (h·ª£p ƒë·ªìng x√°c ƒë·ªãnh th·ªùi h·∫°n).
            
            Ng∆∞·ªùi s·ª≠ d·ª•ng lao ƒë·ªông ph·∫£i tr·∫£ l∆∞∆°ng, b·∫£o hi·ªÉm x√£ h·ªôi v√† c√°c quy·ªÅn l·ª£i kh√°c.
            """
        }
    
    def initialize(self):
        """Initialize the LLM system."""
        try:
            with st.spinner("üîÑ ƒêang kh·ªüi t·∫°o LLM..."):
                logger.info("Initializing ChatOllama with model: gemma3:1b")
                # Initialize LLM with a smaller model for faster response
                self.llm = ChatOllama(
                    model="gemma3:1b",  # Smaller model for faster response
                    temperature=0.1,
                    top_p=0.9
                )
                self.initialized = True
                logger.info("LLM system initialized successfully")
                return True
        except Exception as e:
            logger.error(f"Failed to initialize LLM system: {str(e)}")
            st.error(f"‚ùå L·ªói kh·ªüi t·∫°o LLM: {str(e)}")
            self.initialized = False
            return False
    
    def get_relevant_knowledge(self, question: str) -> str:
        """Get relevant legal knowledge based on question keywords."""
        logger.info(f"Getting relevant knowledge for question: {question[:50]}...")
        question_lower = question.lower()
        relevant_knowledge = []
        matched_topics = []
        
        for topic, knowledge in self.legal_knowledge.items():
            if any(keyword in question_lower for keyword in topic.split()):
                relevant_knowledge.append(knowledge)
                matched_topics.append(topic)
        
        # If no specific topic found, return general legal knowledge
        if not relevant_knowledge:
            relevant_knowledge = list(self.legal_knowledge.values())[:2]  # First 2 topics
            logger.info("No specific topic matched, using general knowledge")
        else:
            logger.info(f"Matched topics: {matched_topics}")
        
        logger.info(f"Retrieved {len(relevant_knowledge)} knowledge chunks")
        return "\n\n".join(relevant_knowledge)
    
    def get_answer(self, question: str) -> str:
        """Get answer using LLM with legal knowledge context."""
        logger.info(f"Processing question: {question[:100]}...")
        
        if not self.initialized:
            logger.warning("System not initialized, returning error message")
            return "H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng nh·∫•n 'Kh·ªüi t·∫°o h·ªá th·ªëng'."
        
        try:
            # Get relevant legal knowledge
            context = self.get_relevant_knowledge(question)
            logger.info(f"Context length: {len(context)} characters")
            
            # Create prompt template
            prompt_template = PromptTemplate(
                input_variables=["context", "question"],
                template="""
B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n ph√°p lu·∫≠t Vi·ªát Nam. H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n ki·∫øn th·ª©c ph√°p l√Ω ƒë∆∞·ª£c cung c·∫•p.

Ki·∫øn th·ª©c ph√°p l√Ω:
{context}

C√¢u h·ªèi: {question}

H∆∞·ªõng d·∫´n tr·∫£ l·ªùi:
1. Tr·∫£ l·ªùi ch√≠nh x√°c d·ª±a tr√™n ki·∫øn th·ª©c ƒë∆∞·ª£c cung c·∫•p
2. S·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu, th√¢n thi·ªán
3. N·∫øu c·∫ßn thi·∫øt, h√£y gi·∫£i th√≠ch th√™m v·ªÅ c√°c kh√°i ni·ªám ph√°p l√Ω
4. N·∫øu th√¥ng tin kh√¥ng ƒë·ªß ƒë·ªÉ tr·∫£ l·ªùi, h√£y n√≥i r√µ ƒëi·ªÅu ƒë√≥
5. Lu√¥n nh·∫Øc nh·ªü ng∆∞·ªùi d√πng n√™n tham kh·∫£o √Ω ki·∫øn lu·∫≠t s∆∞ cho c√°c v·∫•n ƒë·ªÅ ph·ª©c t·∫°p
6. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch (kh√¥ng qu√° 300 t·ª´)

Tr·∫£ l·ªùi:
"""
            )
            
            # Create chain
            chain = prompt_template | self.llm | StrOutputParser()
            
            # Generate answer
            answer = chain.invoke({"context": context, "question": question})
            logger.info(f"Generated answer length: {len(answer)} characters")
            logger.info("Answer generation completed successfully")
            return answer
            
        except Exception as e:
            logger.error(f"Error generating answer: {str(e)}", exc_info=True)
            return f"Xin l·ªói, c√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u tr·∫£ l·ªùi: {str(e)}"

def initialize_session_state():
    """Initialize session state."""
    if "messages" not in st.session_state:
        st.session_state.messages = []
        logger.info("Created new messages list in session state")
    if "qa_system" not in st.session_state:
        st.session_state.qa_system = SimpleLegalQAWithLLM()
        logger.info("Created new QA system in session state")

def display_message(role: str, content: str):
    """Display a chat message."""
    if role == "user":
        st.markdown(f"""
        <div class="chat-message user-message">
            <strong>üë§ B·∫°n:</strong><br>
            {content}
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="chat-message assistant-message">
            <strong>‚öñÔ∏è Lu·∫≠t s∆∞ AI:</strong><br>
            {content}
        </div>
        """, unsafe_allow_html=True)

def main():
    """Main application."""
    
    # Initialize
    initialize_session_state()
    
    # Header
    st.markdown('<h1 class="main-header">‚öñÔ∏è Legal QA Chatbot - Simple LLM</h1>', unsafe_allow_html=True)
    st.markdown("### Phi√™n b·∫£n ƒë∆°n gi·∫£n s·ª≠ d·ª•ng LLM (kh√¥ng c·∫ßn Qdrant)")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # System status
        status_color = "status-ready" if st.session_state.qa_system.initialized else "status-not-ready"
        status_text = "S·∫µn s√†ng" if st.session_state.qa_system.initialized else "Ch∆∞a s·∫µn s√†ng"
        status_icon = "‚úÖ" if st.session_state.qa_system.initialized else "‚ö†Ô∏è"
        
        st.markdown(f"""
        <div style="display: flex; align-items: center; margin-bottom: 1rem; padding: 0.5rem; border-radius: 0.5rem; background-color: {'#e8f5e8' if st.session_state.qa_system.initialized else '#fff3cd'};">
            <span class="status-indicator {status_color}"></span>
            <strong>{status_icon} Tr·∫°ng th√°i: {status_text}</strong>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng", type="primary"):
            if st.session_state.qa_system.initialize():
                st.success("‚úÖ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng!")
                logger.info("System initialization completed successfully")
                st.rerun()
            else:
                logger.error("System initialization failed")
        
        # Show instruction if not initialized
        if not st.session_state.qa_system.initialized:
            st.warning("""
            **H∆∞·ªõng d·∫´n:**
            1. Nh·∫•n "üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng" ƒë·ªÉ b·∫Øt ƒë·∫ßu
            2. ƒê·∫£m b·∫£o Ollama ƒëang ch·∫°y v·ªõi model `gemma3:1b`
            3. Sau khi kh·ªüi t·∫°o, b·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi
            """)
        
        st.divider()
        
        # Model info
        st.subheader("ü§ñ Th√¥ng tin LLM")
        st.info("""
        **Model:** gemma3:1b
        **T√≠nh nƒÉng:** 
        - S·ª≠ d·ª•ng LLM ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi
        - Kh√¥ng c·∫ßn Qdrant vector database
        - Ph·∫£n h·ªìi nhanh h∆°n
        - Ki·∫øn th·ª©c ph√°p l√Ω c√≥ s·∫µn
        """)
        
        st.divider()
        
        # Quick questions
        st.subheader("‚ùì C√¢u h·ªèi m·∫´u")
        sample_questions = [
            "Thu·∫ø thu nh·∫≠p c√° nh√¢n l√† g√¨?",
            "C√°ch t√≠nh thu·∫ø VAT nh∆∞ th·∫ø n√†o?",
            "Lu·∫≠t lao ƒë·ªông quy ƒë·ªãnh g√¨?",
            "Th·ªß t·ª•c ƒëƒÉng k√Ω kinh doanh?",
            "Quy·ªÅn c·ªßa ng∆∞·ªùi lao ƒë·ªông?",
            "H·ª£p ƒë·ªìng lao ƒë·ªông c√≥ nh·ªØng lo·∫°i n√†o?",
            "Quy ƒë·ªãnh v·ªÅ ngh·ªâ vi·ªác?"
        ]
        
        for question in sample_questions:
            if st.button(question, key=f"sample_{question}"):
                logger.info(f"User clicked sample question: {question}")
                # Add user message
                st.session_state.messages.append({"role": "user", "content": question})
                
                # Generate response automatically
                if st.session_state.qa_system.initialized:
                    with st.spinner("ü§ñ ƒêang t·∫°o c√¢u tr·∫£ l·ªùi..."):
                        answer = st.session_state.qa_system.get_answer(question)
                    st.session_state.messages.append({"role": "assistant", "content": answer})
                else:
                    error_msg = "‚ö†Ô∏è Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc."
                    st.session_state.messages.append({"role": "assistant", "content": error_msg})
                
                st.rerun()
        
        st.divider()
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
            st.session_state.messages = []
            logger.info("Cleared chat history")
            st.rerun()
    
    # Main chat
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Display messages
        for message in st.session_state.messages:
            display_message(message["role"], message["content"])
        
        # Chat input
        if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi ph√°p lu·∫≠t..."):
            logger.info(f"User entered prompt: {prompt[:100]}...")
            # Add user message
            st.session_state.messages.append({"role": "user", "content": prompt})
            display_message("user", prompt)
            
            # Generate response
            if st.session_state.qa_system.initialized:
                with st.spinner("ü§ñ ƒêang t·∫°o c√¢u tr·∫£ l·ªùi..."):
                    answer = st.session_state.qa_system.get_answer(prompt)
                st.session_state.messages.append({"role": "assistant", "content": answer})
                display_message("assistant", answer)
            else:
                error_msg = "‚ö†Ô∏è Vui l√≤ng kh·ªüi t·∫°o h·ªá th·ªëng tr∆∞·ªõc khi s·ª≠ d·ª•ng."
                st.session_state.messages.append({"role": "assistant", "content": error_msg})
                display_message("assistant", error_msg)
    
    with col2:
        st.subheader("üìä Th·ªëng k√™")
        st.metric("üí¨ S·ªë tin nh·∫Øn", len(st.session_state.messages))
        
        if st.session_state.qa_system.initialized:
            st.metric("ü§ñ LLM Model", "gemma3:1b")
        
        st.divider()
        
        st.subheader("‚ÑπÔ∏è Th√¥ng tin")
        st.info("""
        **Phi√™n b·∫£n Simple LLM** n√†y:
        - ‚úÖ S·ª≠ d·ª•ng LLM (gemma3:1b)
        - ‚úÖ Ki·∫øn th·ª©c ph√°p l√Ω c√≥ s·∫µn
        - ‚ùå Kh√¥ng c·∫ßn Qdrant
        - ‚ùå Kh√¥ng c·∫ßn vector database
        - ‚ö° Ph·∫£n h·ªìi nhanh
        
        **So s√°nh:**
        - `app_simple.py`: Ch·ªâ keyword matching
        - `app_simple_llm.py`: LLM + ki·∫øn th·ª©c c√≥ s·∫µn
        - `app.py`: LLM + RAG + Qdrant
        """)
        
        st.divider()
        
        st.markdown("""
        <div style="text-align: center; color: #666; font-size: 0.8rem;">
            <p>‚öñÔ∏è Legal QA Chatbot v1.0</p>
            <p>Simple LLM Version</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
